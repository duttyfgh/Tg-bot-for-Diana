from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import CallbackQuery
import os
import datetime

storage = MemoryStorage()
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot,storage=storage )
#1034111472 ID DIANA

@dp.message_handler(commands=['start'])
async def startDef(message: types.Message):
    await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –±–æ—Ç–∞ –¥–ª—è —Å–∞–º–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π, —Å–∞–º–æ–π –º–∏–ª–æ–π, —Å–∞–º–æ–π –ª—é–±–∏–º–æ–π –¥–µ–≤–æ—á–µ–∫–∏ - –î–∏–∞–Ω—ã –í–∞—Å–∏–ª—å–µ–≤–Ω—ã'
                         '\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ —á—Ç–æ —Å–∫—Ä–æ–º–Ω—ã–π:'
                         '\n 1. "/reminder"'
                         '\n 2. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æüì∏'
                         )
    await message.answer('–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üíå')


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
current_datetime = datetime.datetime.now()

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
formatted_date = current_datetime.strftime("%Y-%m-%d")
formatted_time = current_datetime.strftime("%H:%M")

message_text = f'–ù–∞ –¥–≤–æ—Ä–µ {formatted_date}, –≤—Ä–µ–º—è {formatted_time}, –∞ —è –≤—Å–µ —Ç–∞–∫–∂–µ —Å–∏–ª—å–Ω–æ –ª—é–±–ª—é —Ç–µ–±—è!üíó'
@dp.message_handler(commands=['reminder'])
async def remindedDef(message: types.Message):
    await message.answer(message_text)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /getId
@dp.message_handler(commands=['getId'])
async def notify_user(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    user_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø—Ä–∏–≤–µ—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id
    print(message.chat.first_name,  user_id)
    await bot.send_message(910013627, f'{message.chat.first_name}üë§: {user_id}')

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.reply("–í–∞—à id —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —É dutyfgh!")


# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SendToDiana(StatesGroup):
    waiting_for_text = State()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

keyboard = types.InlineKeyboardMarkup()
cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ üö´", callback_data="cancel")
change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å ‚úè", callback_data="change")
send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="send")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard.add(cancel_button, change_button, send_button)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /notify
@dp.message_handler(commands="notify", state=None)
async def notify(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –ª—é–±–∏–º–æ–π –¥–µ–≤—á—É–ª–µ?")
    await SendToDiana.waiting_for_text.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(state=SendToDiana.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ChangedText'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

#callbacks
@dp.callback_query_handler(lambda query: query.data == "cancel", state=SendToDiana.waiting_for_text)
async def cancel_text(callback_query: CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(callback_query.id, text="–û—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query_handler(lambda query: query.data == "change", state=SendToDiana.waiting_for_text)
async def change_text(callback_query: CallbackQuery):
    await SendToDiana.waiting_for_text.set()
    await bot.answer_callback_query(callback_query.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")

@dp.callback_query_handler(lambda query: query.data == "send", state=SendToDiana.waiting_for_text)
async def send_text(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        changed_text = data['ChangedText']

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –î–∏–∞–Ω–µ
    await bot.send_message(1034111472, changed_text)
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞

    # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.answer_callback_query(callback_query.id, text=f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –î–∏–∞–Ω–µ: {changed_text}")


@dp.message_handler(content_types=types.ContentTypes.TEXT)#
async def handle_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "—è —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?"
    if message.text.strip().lower() == "—è —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?":
        await message.answer('–î–∞ —Ç—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞!üíò, —á—Ç–æ –∑–∞ –≤–æ–ø—Ä–æ—Å—ã?!?')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∫—Ç–æ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?"
    elif message.text.strip().lower() == "–∫—Ç–æ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?":
        with open('photo.jpg', 'rb') as photo:
            await message.answer_photo(photo, caption="–í–æ—Ç –æ–Ω–∞!üòç")
    elif message.text.strip().lower() == "—É –∫–æ–≥–æ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–æ–≥–æ—Ç–æ—á–∫–∏?":
        await message.answer('–£ —Ç–µ–±—è!!')
    else:
        await message.answer(
            '–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é —è –ø–æ–Ω–∏–º–∞—é —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —è –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—é —á—Ç–æ –ª—é–±–ª—é —Ç–µ–±—è')  ## .reply —Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer('–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∏ —è –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞—é:\n'
                             '1. —è —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?\n'
                             '2. –∫—Ç–æ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?\n'
                             '3. —É –∫–æ–≥–æ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–æ–≥–æ—Ç–æ—á–∫–∏?')
        await bot.send_message(910013627, f'‚Äº–ù–µ–∏–∑–≤–µ—Å—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç‚Äº {message.chat.first_name}üë§: "{message.text}"')
    
@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def handle_photo(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–í–∞—É! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞!üòç")




executor.start_polling(dp, skip_updates=True)