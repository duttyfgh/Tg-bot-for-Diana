from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import CallbackQuery
from background import keep_alive
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pytz

import os
import datetime

TOKEN = '6465575232:AAHIkY9wl72ICzr_UgKpKAJOGmFBhdyM6qo'

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot,storage=storage )
#1034111472 DIANA'S ID 
#910013627 DIMA'S ID 

@dp.message_handler(commands=['start'])
async def startDef(message: types.Message):
    await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –±–æ—Ç–∞ –¥–ª—è —Å–∞–º–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π, —Å–∞–º–æ–π –º–∏–ª–æ–π, —Å–∞–º–æ–π –ª—é–±–∏–º–æ–π –¥–µ–≤–æ—á–µ–∫–∏ - –î–∏–∞–Ω—ã –í–∞—Å–∏–ª—å–µ–≤–Ω—ã'
                         '\n–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æüì∏ —è –±—É–¥—É –±–µ–∑—É–º–Ω–æ —Ä–∞–¥'
                         )
    await message.answer('–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üíå', reply_markup=mainKeyboard)

mainKeyboard = ReplyKeyboardMarkup(resize_keyboard=True)
mainKeyboard.add(
    KeyboardButton("–ù–∞–ø–æ–º–Ω–∏—Ç—åüíó"),
)
mainKeyboard.add(
    KeyboardButton("–ö–∞–∫ –¥–æ–ª–≥–æ –º—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—èü§î?")
)
mainKeyboard.add(
  KeyboardButton("–ú–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–πüéÅ")
)
mainKeyboard.add(
    KeyboardButton("Admin‚öôÔ∏è")
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∏–µ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
kiev_timezone = pytz.timezone('Europe/Kiev')

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∫–∏–µ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
current_datetime = datetime.datetime.now(kiev_timezone)

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
formatted_date = current_datetime.strftime("%Y-%m-%d")
formatted_time = current_datetime.strftime("%H:%M")

message_text = f'–ù–∞ –¥–≤–æ—Ä–µ {formatted_date}, –≤—Ä–µ–º—è {formatted_time}, –∞ —è –≤—Å–µ —Ç–∞–∫–∂–µ —Å–∏–ª—å–Ω–æ –ª—é–±–ª—é —Ç–µ–±—è!üíó'

#–°—á–∏—Ç–∞–µ–º –∫–∞–∫ –¥–æ–ª–≥–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è
def days_since():
  # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
  start_date = datetime.datetime(2023, 9, 8)

  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
  current_date = datetime.datetime.now()

  # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
  delta = current_date - start_date

  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, –¥–Ω–µ–π –∏ —á–∞—Å–æ–≤
  months = delta.days // 30
  days = delta.days % 30
  hours = delta.seconds // 3600

  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  result = f"–ú—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É–∂–µ {months} –º–µ—Å—è—Ü–µ–≤, {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤üíó"

  return result

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /howLong
@dp.message_handler(commands=['howLong'])
async def notify_user(message: types.Message):

    dateTime = days_since()
    await message.reply(dateTime)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /getId
@dp.message_handler(commands=['getId'])
async def notify_user(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    user_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø—Ä–∏–≤–µ—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id
    print(message.chat.first_name,  user_id)
    await bot.send_message(910013627, f'{message.chat.first_name}üë§: {user_id}')

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.reply("–í–∞—à id —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —É dutyfgh!")


# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SendToDiana(StatesGroup):
    waiting_for_text = State()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

keyboard = types.InlineKeyboardMarkup()
cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ üö´", callback_data="cancel")
change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å ‚úè", callback_data="change")
send_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="send")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard.add(cancel_button, change_button, send_button)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /notify
@dp.message_handler(commands="notify", state=None)
async def notify(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –î–∏–∞–Ω–µ?üíå")
    await SendToDiana.waiting_for_text.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(state=SendToDiana.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ChangedText'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

#callbacks
@dp.callback_query_handler(lambda query: query.data == "cancel", state=SendToDiana.waiting_for_text)
async def cancel_text(callback_query: CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, text="–û—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query_handler(lambda query: query.data == "change", state=SendToDiana.waiting_for_text)
async def change_text(callback_query: CallbackQuery):
    await SendToDiana.waiting_for_text.set()
    await bot.send_message(callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")

@dp.callback_query_handler(lambda query: query.data == "send", state=SendToDiana.waiting_for_text)
async def send_text(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        changed_text = data['ChangedText']

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –î–∏–∞–Ω–µ
    await bot.send_message(1034111472, changed_text)
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(callback_query.from_user.id, text=f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –î–∏–∞–Ω–µ: {changed_text}")

# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π
class WishListState(StatesGroup):
    waiting_for_wish = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ú–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–πüéÅ"
@dp.message_handler(lambda message: message.text == "–ú–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–πüéÅ")
async def show_wishlist(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    view_button = InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π üëÅÔ∏èüéÅ", callback_data="view_wishlist")
    add_button = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π‚úç‚ûï", callback_data="add_to_wishlist")
    keyboard.add(view_button, add_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π"
@dp.callback_query_handler(lambda query: query.data == "view_wishlist", state="*")
async def view_wishlist(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ wishList.txt
        try:
            with open("wishList.txt", "r", encoding="utf-8") as file:
                wishlist_content = file.read()
        except FileNotFoundError:
            wishlist_content = "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∂–µ–ª–∞–Ω–∏–µ!"

    await bot.send_message(callback_query.from_user.id, f"–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n{wishlist_content}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π"
@dp.callback_query_handler(lambda query: query.data == "add_to_wishlist", state="*")
async def add_to_wishlist(callback_query: types.CallbackQuery, state: FSMContext):
    await WishListState.waiting_for_wish.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∂–µ–ª–∞–Ω–∏—è
@dp.message_handler(state=WishListState.waiting_for_wish)
async def process_wish(message: types.Message, state: FSMContext):
    wish = message.text

    # –ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open("wishList.txt", "a", encoding="utf-8") as file:
        file.write(wish + "\n")

    with open("wishList.txt", "r", encoding="utf-8") as file:
        wishlist_content = file.read()

    await state.finish()
    await message.answer("–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫‚úÖ")
    await message.answer("–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫üìã:")
    await message.answer(wishlist_content)

#–í—ã—Ö–æ–¥ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.message_handler(commands=['back'])
async def handle_message(message: types.Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=mainKeyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.text.strip() == "Admin‚öôÔ∏è":
        adminKeyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        adminKeyboard.add(
            KeyboardButton("/notify"),
        )
        adminKeyboard.add(
            KeyboardButton("/getId")
        )
        adminKeyboard.add(
            KeyboardButton("/back")
        )
        if message.from_user.id == 910013627:
            await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è‚úîÔ∏è', reply_markup=adminKeyboard)
        else:                               
            await message.answer('–í—ã –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞üòíüôÑ‚ùå')
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text.strip().lower() == "—è —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?":
            await message.answer('–î–∞ —Ç—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞!üíò, —á—Ç–æ –∑–∞ –≤–æ–ø—Ä–æ—Å—ã?!?')
        elif message.text.strip().lower() == "–ø–æ–∫–∞–∂–∏ –º–Ω–µ —Å–∞–º—É—é –∫—Ä–∞—Å–∏–≤—É—é –¥–µ–≤–æ—á–∫—É":
            with open('photo.jpg', 'rb') as photo:
                await message.answer_photo(photo, caption="–í–æ—Ç –æ–Ω–∞!üòç")
        elif message.text.strip().lower() == "—É –∫–æ–≥–æ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–æ–≥–æ—Ç–æ—á–∫–∏?":
            await message.answer('–£ —Ç–µ–±—è!!')
        elif message.text.strip() == "–ù–∞–ø–æ–º–Ω–∏—Ç—åüíó":
            await message.answer(message_text)
        elif message.text.strip() == "–ö–∞–∫ –¥–æ–ª–≥–æ –º—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—èü§î?":
            await message.answer(days_since())    
        else:
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–Ω–∏–º–∞—é —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —è –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—é, —á—Ç–æ –ª—é–±–ª—é —Ç–µ–±—è')  ## .reply —Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer('–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å, –∏ —è –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞—é:\n'
                                 '1. —è —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞?\n'
                                 '2. –ø–æ–∫–∞–∂–∏ –º–Ω–µ —Å–∞–º—É—é –∫—Ä–∞—Å–∏–≤—É—é –¥–µ–≤–æ—á–∫—É\n'
                                 '3. —É –∫–æ–≥–æ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–æ–≥–æ—Ç–æ—á–∫–∏?')
            if(message.from_user.id != 910013627):
              await bot.send_message(910013627, f'‚Äº–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç‚Äº {message.chat.first_name}üë§: "{message.text}"')

@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def handle_photo(message: types.Message):
    #–ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if(message.from_user.id == 1034111472):
        photo_id = message.photo[-1].file_id
        await bot.send_photo(910013627, photo_id, caption="–î–∏–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ç–æüòç")
    else:
      await message.answer('dutyfgh –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å–∞–º —Å–µ–±–µüòç')
    #–ü–∏—à–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
    await message.answer("–í–∞—Éüòç, –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞üõê")

keep_alive()
executor.start_polling(dp, skip_updates=True)